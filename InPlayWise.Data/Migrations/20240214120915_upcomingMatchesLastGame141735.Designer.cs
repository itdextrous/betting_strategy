// <auto-generated />
using System;
using InPlayWiseData.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InPlayWise.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240214120915_upcomingMatchesLastGame141735")]
    partial class upcomingMatchesLastGame141735
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("InPlayWise.Common.DTO.PredictionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("AwayAttacks")
                        .HasColumnType("smallint");

                    b.Property<short>("AwayCorners")
                        .HasColumnType("smallint");

                    b.Property<short>("AwayDangerousAttacks")
                        .HasColumnType("smallint");

                    b.Property<short>("AwayGoals")
                        .HasColumnType("smallint");

                    b.Property<short>("AwayOwnGoals")
                        .HasColumnType("smallint");

                    b.Property<short>("AwayPenalties")
                        .HasColumnType("smallint");

                    b.Property<short>("AwayPossession")
                        .HasColumnType("smallint");

                    b.Property<short>("AwayRed")
                        .HasColumnType("smallint");

                    b.Property<short>("AwayShotsOffTarget")
                        .HasColumnType("smallint");

                    b.Property<short>("AwayShotsOnTarget")
                        .HasColumnType("smallint");

                    b.Property<short>("AwayYellow")
                        .HasColumnType("smallint");

                    b.Property<short>("ExtraTime")
                        .HasColumnType("smallint");

                    b.Property<short>("HomeAttacks")
                        .HasColumnType("smallint");

                    b.Property<short>("HomeCorners")
                        .HasColumnType("smallint");

                    b.Property<short>("HomeDangerousAttacks")
                        .HasColumnType("smallint");

                    b.Property<short>("HomeGoals")
                        .HasColumnType("smallint");

                    b.Property<short>("HomeOwnGoals")
                        .HasColumnType("smallint");

                    b.Property<short>("HomePenalties")
                        .HasColumnType("smallint");

                    b.Property<short>("HomePossession")
                        .HasColumnType("smallint");

                    b.Property<short>("HomeRed")
                        .HasColumnType("smallint");

                    b.Property<short>("HomeShotsOffTarget")
                        .HasColumnType("smallint");

                    b.Property<short>("HomeShotsOnTarget")
                        .HasColumnType("smallint");

                    b.Property<short>("HomeYellow")
                        .HasColumnType("smallint");

                    b.Property<short>("Incident")
                        .HasColumnType("smallint");

                    b.Property<string>("MatchId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("MatchMinutes")
                        .HasColumnType("smallint");

                    b.Property<short>("MatchStatus")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("PredictionData");
                });

            modelBuilder.Entity("InPlayWise.Common.SportsEntities.RecentMatchModel", b =>
                {
                    b.Property<string>("MatchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AbruptEnd")
                        .HasColumnType("bit");

                    b.Property<int>("AwayAttacks")
                        .HasColumnType("int");

                    b.Property<string>("AwayCornerMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AwayCorners")
                        .HasColumnType("int");

                    b.Property<int>("AwayDangerousAttacks")
                        .HasColumnType("int");

                    b.Property<string>("AwayGoalMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AwayGoals")
                        .HasColumnType("int");

                    b.Property<short>("AwayOwnGoals")
                        .HasColumnType("smallint");

                    b.Property<short>("AwayPenalties")
                        .HasColumnType("smallint");

                    b.Property<int>("AwayPossession")
                        .HasColumnType("int");

                    b.Property<int>("AwayRedCards")
                        .HasColumnType("int");

                    b.Property<string>("AwayRedMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AwayScoredFirstAndWin")
                        .HasColumnType("bit");

                    b.Property<string>("AwayShotsMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AwayShotsOffTarget")
                        .HasColumnType("int");

                    b.Property<int>("AwayShotsOnTarget")
                        .HasColumnType("int");

                    b.Property<string>("AwayShotsOnTargetMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwaySubstitutionMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AwayTeamComebackToDraw")
                        .HasColumnType("bit");

                    b.Property<bool>("AwayTeamComebackToWin")
                        .HasColumnType("bit");

                    b.Property<int>("AwayTeamHalfTimeScore")
                        .HasColumnType("int");

                    b.Property<string>("AwayTeamId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwayTeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AwayYellowCards")
                        .HasColumnType("int");

                    b.Property<string>("AwayYellowMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompetitionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompetitionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CompleteInfo")
                        .HasColumnType("bit");

                    b.Property<bool>("Ended")
                        .HasColumnType("bit");

                    b.Property<bool>("GameDrawn")
                        .HasColumnType("bit");

                    b.Property<int>("HomeAttacks")
                        .HasColumnType("int");

                    b.Property<string>("HomeCornerMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeCorners")
                        .HasColumnType("int");

                    b.Property<int>("HomeDangerousAttacks")
                        .HasColumnType("int");

                    b.Property<string>("HomeGoalMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeGoals")
                        .HasColumnType("int");

                    b.Property<short>("HomeOwnGoals")
                        .HasColumnType("smallint");

                    b.Property<short>("HomePenalties")
                        .HasColumnType("smallint");

                    b.Property<int>("HomePossession")
                        .HasColumnType("int");

                    b.Property<int>("HomeRedCards")
                        .HasColumnType("int");

                    b.Property<string>("HomeRedMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HomeScoredFirstAndWin")
                        .HasColumnType("bit");

                    b.Property<string>("HomeShotsMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeShotsOffTarget")
                        .HasColumnType("int");

                    b.Property<int>("HomeShotsOnTarget")
                        .HasColumnType("int");

                    b.Property<string>("HomeShotsOnTargetMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeSubstitutionMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HomeTeamComebackToDraw")
                        .HasColumnType("bit");

                    b.Property<bool>("HomeTeamComebackToWin")
                        .HasColumnType("bit");

                    b.Property<int>("HomeTeamHalfTimeScore")
                        .HasColumnType("int");

                    b.Property<string>("HomeTeamId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HomeWin")
                        .HasColumnType("bit");

                    b.Property<int>("HomeYellowCards")
                        .HasColumnType("int");

                    b.Property<string>("HomeYellowMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MatchStartTime")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("MatchStartTimeOfficial")
                        .HasColumnType("datetime2");

                    b.Property<bool>("OverTime")
                        .HasColumnType("bit");

                    b.Property<bool>("PenaltyShootout")
                        .HasColumnType("bit");

                    b.Property<string>("SeasonId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalMatchMinutes")
                        .HasColumnType("int");

                    b.HasKey("MatchId");

                    b.ToTable("RecentMatches");
                });

            modelBuilder.Entity("InPlayWise.Common.SportsEntities.TeamModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompetitionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNational")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.Advertisement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirmLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.AllPrediction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("AvgTimeToGoal")
                        .HasColumnType("real");

                    b.Property<int>("AwayAttacks")
                        .HasColumnType("int");

                    b.Property<double>("AwayAttacksRatio")
                        .HasColumnType("float");

                    b.Property<double>("AwayAttacksRatio2")
                        .HasColumnType("float");

                    b.Property<double>("AwayAttacksRatioLog")
                        .HasColumnType("float");

                    b.Property<float>("AwayAvgTimeToGoal")
                        .HasColumnType("real");

                    b.Property<int>("AwayCorners")
                        .HasColumnType("int");

                    b.Property<double>("AwayCornersRatio")
                        .HasColumnType("float");

                    b.Property<double>("AwayCornersRatio2")
                        .HasColumnType("float");

                    b.Property<double>("AwayCornersRatioLog")
                        .HasColumnType("float");

                    b.Property<float>("AwayDangerouAttacksRatio")
                        .HasColumnType("real");

                    b.Property<int>("AwayDangerousAttacks")
                        .HasColumnType("int");

                    b.Property<double>("AwayDangerousAttacksMinuteRatio2")
                        .HasColumnType("float");

                    b.Property<double>("AwayDangerousAttacksMinuteRatioLog")
                        .HasColumnType("float");

                    b.Property<float>("AwayDangerousAttacksMinuteRation")
                        .HasColumnType("real");

                    b.Property<int>("AwayGoals")
                        .HasColumnType("int");

                    b.Property<int>("AwayPenalties")
                        .HasColumnType("int");

                    b.Property<double>("AwayPenaltiesRatio")
                        .HasColumnType("float");

                    b.Property<double>("AwayPenaltiesRatio2")
                        .HasColumnType("float");

                    b.Property<double>("AwayPenaltiesRatioLog")
                        .HasColumnType("float");

                    b.Property<int>("AwayShotsOffTarget")
                        .HasColumnType("int");

                    b.Property<double>("AwayShotsOnOffRatio")
                        .HasColumnType("float");

                    b.Property<int>("AwayShotsOnTarget")
                        .HasColumnType("int");

                    b.Property<int>("CPGoalFirst10Minutes")
                        .HasColumnType("int");

                    b.Property<double>("DangerousAttacksMinuteRatio2")
                        .HasColumnType("float");

                    b.Property<double>("DangerousAttacksMinuteRatioLog")
                        .HasColumnType("float");

                    b.Property<float>("DangerousAttacksMinuteRation")
                        .HasColumnType("real");

                    b.Property<float>("DangerousAttacksRatio")
                        .HasColumnType("real");

                    b.Property<double>("DangerousAttacksRatio2")
                        .HasColumnType("float");

                    b.Property<double>("DangerousAttacksRatioLog")
                        .HasColumnType("float");

                    b.Property<double>("GoalDiff2")
                        .HasColumnType("float");

                    b.Property<double>("GoalDiffLog")
                        .HasColumnType("float");

                    b.Property<int>("GoalDifference")
                        .HasColumnType("int");

                    b.Property<int>("HomeAttacks")
                        .HasColumnType("int");

                    b.Property<double>("HomeAttacksRatio")
                        .HasColumnType("float");

                    b.Property<double>("HomeAttacksRatio2")
                        .HasColumnType("float");

                    b.Property<double>("HomeAttacksRatioLog")
                        .HasColumnType("float");

                    b.Property<float>("HomeAvgTimeToGoal")
                        .HasColumnType("real");

                    b.Property<int>("HomeCorners")
                        .HasColumnType("int");

                    b.Property<double>("HomeCornersRatio")
                        .HasColumnType("float");

                    b.Property<double>("HomeCornersRatio2")
                        .HasColumnType("float");

                    b.Property<double>("HomeCornersRatioLog")
                        .HasColumnType("float");

                    b.Property<int>("HomeDangerousAttacks")
                        .HasColumnType("int");

                    b.Property<float>("HomeDangerousAttacksMinuteRatio")
                        .HasColumnType("real");

                    b.Property<double>("HomeDangerousAttacksMinuteRatio2")
                        .HasColumnType("float");

                    b.Property<double>("HomeDangerousAttacksMinuteRatioLog")
                        .HasColumnType("float");

                    b.Property<float>("HomeDangerousAttacksRatio")
                        .HasColumnType("real");

                    b.Property<double>("HomeDangerousAttacksRatio2")
                        .HasColumnType("float");

                    b.Property<double>("HomeDangerousAttacksRatioLog")
                        .HasColumnType("float");

                    b.Property<int>("HomeGoals")
                        .HasColumnType("int");

                    b.Property<int>("HomePenalties")
                        .HasColumnType("int");

                    b.Property<double>("HomePenaltiesRatio")
                        .HasColumnType("float");

                    b.Property<double>("HomePenaltiesRatio2")
                        .HasColumnType("float");

                    b.Property<double>("HomePenaltiesRatioLog")
                        .HasColumnType("float");

                    b.Property<int>("HomeShotsOffTarget")
                        .HasColumnType("int");

                    b.Property<double>("HomeShotsOnOffRatio")
                        .HasColumnType("float");

                    b.Property<int>("HomeShotsOnTarget")
                        .HasColumnType("int");

                    b.Property<int>("Identity00")
                        .HasColumnType("int");

                    b.Property<int>("Identity01")
                        .HasColumnType("int");

                    b.Property<int>("Identity02")
                        .HasColumnType("int");

                    b.Property<int>("Identity03")
                        .HasColumnType("int");

                    b.Property<int>("Identity04")
                        .HasColumnType("int");

                    b.Property<int>("Identity05")
                        .HasColumnType("int");

                    b.Property<int>("Identity06")
                        .HasColumnType("int");

                    b.Property<int>("Identity07")
                        .HasColumnType("int");

                    b.Property<int>("Identity08")
                        .HasColumnType("int");

                    b.Property<int>("Identity0Over8")
                        .HasColumnType("int");

                    b.Property<int>("Identity11")
                        .HasColumnType("int");

                    b.Property<int>("Identity12")
                        .HasColumnType("int");

                    b.Property<int>("Identity13")
                        .HasColumnType("int");

                    b.Property<int>("Identity14")
                        .HasColumnType("int");

                    b.Property<int>("Identity15")
                        .HasColumnType("int");

                    b.Property<int>("Identity16")
                        .HasColumnType("int");

                    b.Property<int>("Identity17")
                        .HasColumnType("int");

                    b.Property<int>("Identity18")
                        .HasColumnType("int");

                    b.Property<int>("Identity1Over8")
                        .HasColumnType("int");

                    b.Property<int>("Identity22")
                        .HasColumnType("int");

                    b.Property<int>("Identity23")
                        .HasColumnType("int");

                    b.Property<int>("Identity24")
                        .HasColumnType("int");

                    b.Property<int>("Identity25")
                        .HasColumnType("int");

                    b.Property<int>("Identity26")
                        .HasColumnType("int");

                    b.Property<int>("Identity27")
                        .HasColumnType("int");

                    b.Property<int>("Identity28")
                        .HasColumnType("int");

                    b.Property<int>("Identity2Over8")
                        .HasColumnType("int");

                    b.Property<int>("Identity33")
                        .HasColumnType("int");

                    b.Property<int>("Identity34")
                        .HasColumnType("int");

                    b.Property<int>("Identity35")
                        .HasColumnType("int");

                    b.Property<int>("Identity36")
                        .HasColumnType("int");

                    b.Property<int>("Identity37")
                        .HasColumnType("int");

                    b.Property<int>("Identity38")
                        .HasColumnType("int");

                    b.Property<int>("Identity3Over8")
                        .HasColumnType("int");

                    b.Property<int>("Identity44")
                        .HasColumnType("int");

                    b.Property<int>("Identity45")
                        .HasColumnType("int");

                    b.Property<int>("Identity46")
                        .HasColumnType("int");

                    b.Property<int>("Identity47")
                        .HasColumnType("int");

                    b.Property<int>("Identity48")
                        .HasColumnType("int");

                    b.Property<int>("Identity4Over8")
                        .HasColumnType("int");

                    b.Property<int>("Identity55")
                        .HasColumnType("int");

                    b.Property<int>("Identity56")
                        .HasColumnType("int");

                    b.Property<int>("Identity57")
                        .HasColumnType("int");

                    b.Property<int>("Identity58")
                        .HasColumnType("int");

                    b.Property<int>("Identity5Over8")
                        .HasColumnType("int");

                    b.Property<int>("Identity66")
                        .HasColumnType("int");

                    b.Property<int>("Identity67")
                        .HasColumnType("int");

                    b.Property<int>("Identity68")
                        .HasColumnType("int");

                    b.Property<int>("Identity6Over8")
                        .HasColumnType("int");

                    b.Property<int>("Identity77")
                        .HasColumnType("int");

                    b.Property<int>("Identity78")
                        .HasColumnType("int");

                    b.Property<int>("Identity7Over8")
                        .HasColumnType("int");

                    b.Property<int>("Identity88")
                        .HasColumnType("int");

                    b.Property<int>("IdentityOver8Over8")
                        .HasColumnType("int");

                    b.Property<bool>("IsSecondHalf")
                        .HasColumnType("bit");

                    b.Property<int>("MatchMinutes")
                        .HasColumnType("int");

                    b.Property<int>("Time2")
                        .HasColumnType("int");

                    b.Property<int>("Time3")
                        .HasColumnType("int");

                    b.Property<int>("TimeFromLastGoal")
                        .HasColumnType("int");

                    b.Property<int>("TimeFromLastGoalAway")
                        .HasColumnType("int");

                    b.Property<int>("TimeFromLastGoalHome")
                        .HasColumnType("int");

                    b.Property<float>("TimeLog")
                        .HasColumnType("real");

                    b.Property<double>("TotalAttacksRatio")
                        .HasColumnType("float");

                    b.Property<double>("TotalAttacksRatio2")
                        .HasColumnType("float");

                    b.Property<double>("TotalAttacksRatioLog")
                        .HasColumnType("float");

                    b.Property<double>("TotalCornersRatio")
                        .HasColumnType("float");

                    b.Property<double>("TotalCornersRatio2")
                        .HasColumnType("float");

                    b.Property<double>("TotalCornersRatioLog")
                        .HasColumnType("float");

                    b.Property<double>("TotalPenaltiesRatio")
                        .HasColumnType("float");

                    b.Property<double>("TotalPenaltiesRatio2")
                        .HasColumnType("float");

                    b.Property<double>("TotalPenaltiesRatioLog")
                        .HasColumnType("float");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<double>("TotalShotsOnOffRatio")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("AllPredictionData");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<bool>("DesktopAlerts")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailAlerts")
                        .HasColumnType("bit");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("GoogleOauth")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ThemeIsDark")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.DailyPrediction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("AvgTimeToGoal")
                        .HasColumnType("real");

                    b.Property<int>("AwayAttacks")
                        .HasColumnType("int");

                    b.Property<double>("AwayAttacksRatio")
                        .HasColumnType("float");

                    b.Property<double>("AwayAttacksRatio2")
                        .HasColumnType("float");

                    b.Property<double>("AwayAttacksRatioLog")
                        .HasColumnType("float");

                    b.Property<float>("AwayAvgTimeToGoal")
                        .HasColumnType("real");

                    b.Property<int>("AwayCorners")
                        .HasColumnType("int");

                    b.Property<double>("AwayCornersRatio")
                        .HasColumnType("float");

                    b.Property<double>("AwayCornersRatio2")
                        .HasColumnType("float");

                    b.Property<double>("AwayCornersRatioLog")
                        .HasColumnType("float");

                    b.Property<float>("AwayDangerouAttacksRatio")
                        .HasColumnType("real");

                    b.Property<int>("AwayDangerousAttacks")
                        .HasColumnType("int");

                    b.Property<float>("AwayDangerousAttacksMinuteRatio")
                        .HasColumnType("real");

                    b.Property<double>("AwayDangerousAttacksMinuteRatio2")
                        .HasColumnType("float");

                    b.Property<double>("AwayDangerousAttacksMinuteRatioLog")
                        .HasColumnType("float");

                    b.Property<int>("AwayGoals")
                        .HasColumnType("int");

                    b.Property<int>("AwayOwnGoals")
                        .HasColumnType("int");

                    b.Property<int>("AwayPenalties")
                        .HasColumnType("int");

                    b.Property<double>("AwayPenaltiesRatio")
                        .HasColumnType("float");

                    b.Property<double>("AwayPenaltiesRatio2")
                        .HasColumnType("float");

                    b.Property<double>("AwayPenaltiesRatioLog")
                        .HasColumnType("float");

                    b.Property<int>("AwayPossession")
                        .HasColumnType("int");

                    b.Property<int>("AwayRed")
                        .HasColumnType("int");

                    b.Property<int>("AwayShotsOffTarget")
                        .HasColumnType("int");

                    b.Property<double>("AwayShotsOnOffRatio")
                        .HasColumnType("float");

                    b.Property<int>("AwayShotsOnTarget")
                        .HasColumnType("int");

                    b.Property<int>("AwayYellow")
                        .HasColumnType("int");

                    b.Property<byte>("CPGoalFirst10Minutes")
                        .HasColumnType("tinyint");

                    b.Property<float>("DangerousAttacksMinuteRatio")
                        .HasColumnType("real");

                    b.Property<double>("DangerousAttacksMinuteRatio2")
                        .HasColumnType("float");

                    b.Property<double>("DangerousAttacksMinuteRatioLog")
                        .HasColumnType("float");

                    b.Property<float>("DangerousAttacksRatio")
                        .HasColumnType("real");

                    b.Property<double>("DangerousAttacksRatio2")
                        .HasColumnType("float");

                    b.Property<double>("DangerousAttacksRatioLog")
                        .HasColumnType("float");

                    b.Property<double>("GoalDiff2")
                        .HasColumnType("float");

                    b.Property<double>("GoalDiffLog")
                        .HasColumnType("float");

                    b.Property<int>("GoalDifference")
                        .HasColumnType("int");

                    b.Property<int>("HomeAttacks")
                        .HasColumnType("int");

                    b.Property<double>("HomeAttacksRatio")
                        .HasColumnType("float");

                    b.Property<double>("HomeAttacksRatio2")
                        .HasColumnType("float");

                    b.Property<double>("HomeAttacksRatioLog")
                        .HasColumnType("float");

                    b.Property<float>("HomeAvgTimeToGoal")
                        .HasColumnType("real");

                    b.Property<int>("HomeCorners")
                        .HasColumnType("int");

                    b.Property<double>("HomeCornersRatio")
                        .HasColumnType("float");

                    b.Property<double>("HomeCornersRatio2")
                        .HasColumnType("float");

                    b.Property<double>("HomeCornersRatioLog")
                        .HasColumnType("float");

                    b.Property<int>("HomeDangerousAttacks")
                        .HasColumnType("int");

                    b.Property<float>("HomeDangerousAttacksMinuteRatio")
                        .HasColumnType("real");

                    b.Property<double>("HomeDangerousAttacksMinuteRatio2")
                        .HasColumnType("float");

                    b.Property<double>("HomeDangerousAttacksMinuteRatioLog")
                        .HasColumnType("float");

                    b.Property<float>("HomeDangerousAttacksRatio")
                        .HasColumnType("real");

                    b.Property<double>("HomeDangerousAttacksRatio2")
                        .HasColumnType("float");

                    b.Property<double>("HomeDangerousAttacksRatioLog")
                        .HasColumnType("float");

                    b.Property<int>("HomeGoals")
                        .HasColumnType("int");

                    b.Property<int>("HomeOwnGoals")
                        .HasColumnType("int");

                    b.Property<int>("HomePenalties")
                        .HasColumnType("int");

                    b.Property<double>("HomePenaltiesRatio")
                        .HasColumnType("float");

                    b.Property<double>("HomePenaltiesRatio2")
                        .HasColumnType("float");

                    b.Property<double>("HomePenaltiesRatioLog")
                        .HasColumnType("float");

                    b.Property<int>("HomePossession")
                        .HasColumnType("int");

                    b.Property<int>("HomeRed")
                        .HasColumnType("int");

                    b.Property<int>("HomeShotsOffTarget")
                        .HasColumnType("int");

                    b.Property<double>("HomeShotsOnOffRatio")
                        .HasColumnType("float");

                    b.Property<int>("HomeShotsOnTarget")
                        .HasColumnType("int");

                    b.Property<int>("HomeYellow")
                        .HasColumnType("int");

                    b.Property<int>("Identity00")
                        .HasColumnType("int");

                    b.Property<int>("Identity01")
                        .HasColumnType("int");

                    b.Property<int>("Identity02")
                        .HasColumnType("int");

                    b.Property<int>("Identity03")
                        .HasColumnType("int");

                    b.Property<int>("Identity04")
                        .HasColumnType("int");

                    b.Property<int>("Identity05")
                        .HasColumnType("int");

                    b.Property<int>("Identity06")
                        .HasColumnType("int");

                    b.Property<int>("Identity07")
                        .HasColumnType("int");

                    b.Property<int>("Identity08")
                        .HasColumnType("int");

                    b.Property<int>("Identity0Over8")
                        .HasColumnType("int");

                    b.Property<int>("Identity11")
                        .HasColumnType("int");

                    b.Property<int>("Identity12")
                        .HasColumnType("int");

                    b.Property<int>("Identity13")
                        .HasColumnType("int");

                    b.Property<int>("Identity14")
                        .HasColumnType("int");

                    b.Property<int>("Identity15")
                        .HasColumnType("int");

                    b.Property<int>("Identity16")
                        .HasColumnType("int");

                    b.Property<int>("Identity17")
                        .HasColumnType("int");

                    b.Property<int>("Identity18")
                        .HasColumnType("int");

                    b.Property<int>("Identity1Over8")
                        .HasColumnType("int");

                    b.Property<int>("Identity22")
                        .HasColumnType("int");

                    b.Property<int>("Identity23")
                        .HasColumnType("int");

                    b.Property<int>("Identity24")
                        .HasColumnType("int");

                    b.Property<int>("Identity25")
                        .HasColumnType("int");

                    b.Property<int>("Identity26")
                        .HasColumnType("int");

                    b.Property<int>("Identity27")
                        .HasColumnType("int");

                    b.Property<int>("Identity28")
                        .HasColumnType("int");

                    b.Property<int>("Identity2Over8")
                        .HasColumnType("int");

                    b.Property<int>("Identity33")
                        .HasColumnType("int");

                    b.Property<int>("Identity34")
                        .HasColumnType("int");

                    b.Property<int>("Identity35")
                        .HasColumnType("int");

                    b.Property<int>("Identity36")
                        .HasColumnType("int");

                    b.Property<int>("Identity37")
                        .HasColumnType("int");

                    b.Property<int>("Identity38")
                        .HasColumnType("int");

                    b.Property<int>("Identity3Over8")
                        .HasColumnType("int");

                    b.Property<int>("Identity44")
                        .HasColumnType("int");

                    b.Property<int>("Identity45")
                        .HasColumnType("int");

                    b.Property<int>("Identity46")
                        .HasColumnType("int");

                    b.Property<int>("Identity47")
                        .HasColumnType("int");

                    b.Property<int>("Identity48")
                        .HasColumnType("int");

                    b.Property<int>("Identity4Over8")
                        .HasColumnType("int");

                    b.Property<int>("Identity55")
                        .HasColumnType("int");

                    b.Property<int>("Identity56")
                        .HasColumnType("int");

                    b.Property<int>("Identity57")
                        .HasColumnType("int");

                    b.Property<int>("Identity58")
                        .HasColumnType("int");

                    b.Property<int>("Identity5Over8")
                        .HasColumnType("int");

                    b.Property<int>("Identity66")
                        .HasColumnType("int");

                    b.Property<int>("Identity67")
                        .HasColumnType("int");

                    b.Property<int>("Identity68")
                        .HasColumnType("int");

                    b.Property<int>("Identity6Over8")
                        .HasColumnType("int");

                    b.Property<int>("Identity77")
                        .HasColumnType("int");

                    b.Property<int>("Identity78")
                        .HasColumnType("int");

                    b.Property<int>("Identity7Over8")
                        .HasColumnType("int");

                    b.Property<int>("Identity88")
                        .HasColumnType("int");

                    b.Property<int>("IdentityOver8Over8")
                        .HasColumnType("int");

                    b.Property<bool>("IsSecondHalf")
                        .HasColumnType("bit");

                    b.Property<string>("MatchId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchMinutes")
                        .HasColumnType("int");

                    b.Property<int>("Time2")
                        .HasColumnType("int");

                    b.Property<int>("Time3")
                        .HasColumnType("int");

                    b.Property<int>("TimeFromLastGoal")
                        .HasColumnType("int");

                    b.Property<int>("TimeFromLastGoalAway")
                        .HasColumnType("int");

                    b.Property<int>("TimeFromLastGoalHome")
                        .HasColumnType("int");

                    b.Property<float>("TimeLog")
                        .HasColumnType("real");

                    b.Property<double>("TotalAttacksRatio")
                        .HasColumnType("float");

                    b.Property<double>("TotalAttacksRatio2")
                        .HasColumnType("float");

                    b.Property<double>("TotalAttacksRatioLog")
                        .HasColumnType("float");

                    b.Property<double>("TotalCornersRatio")
                        .HasColumnType("float");

                    b.Property<double>("TotalCornersRatio2")
                        .HasColumnType("float");

                    b.Property<double>("TotalCornersRatioLog")
                        .HasColumnType("float");

                    b.Property<double>("TotalPenaltiesRatio")
                        .HasColumnType("float");

                    b.Property<double>("TotalPenaltiesRatio2")
                        .HasColumnType("float");

                    b.Property<double>("TotalPenaltiesRatioLog")
                        .HasColumnType("float");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<double>("TotalShotsOnOffRatio")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("DailyPredictionData");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.FavouriteCompetitions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompetitionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteCompetitions");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.FavouriteTeams", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteTeams");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.FeaturesCountEntities.CleverLabelsCounter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("CleverLabelsCounters");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.FeaturesCountEntities.FeatureCounter", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.ToTable("FeatureCounter");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.FeaturesCountEntities.LeagueStatsCount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LeagueId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LeagueStatsCounter");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.FeaturesCountEntities.LiveInsightsPerGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FeatureCounterUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Hits")
                        .HasColumnType("int");

                    b.Property<string>("MatchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureCounterUserId");

                    b.HasIndex("MatchId");

                    b.HasIndex("UserId");

                    b.ToTable("LiveInsightsCounter");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.FeaturesCountEntities.PredictionCounter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Hits")
                        .HasColumnType("int");

                    b.Property<string>("MatchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("UserId");

                    b.ToTable("PredictionCounters");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.FeaturesCountEntities.ShockCounter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Matchid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Matchid");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("ShockCounter");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.LeagueStats", b =>
                {
                    b.Property<string>("CompetitionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BTTS")
                        .HasColumnType("int");

                    b.Property<float>("CardsPerMatch")
                        .HasColumnType("real");

                    b.Property<float>("CornersPerMatch")
                        .HasColumnType("real");

                    b.Property<float>("GoalsPerMatch")
                        .HasColumnType("real");

                    b.Property<int>("MatchesThisSeason")
                        .HasColumnType("int");

                    b.Property<int>("OverOnePointFive")
                        .HasColumnType("int");

                    b.Property<int>("OverTwoPointFive")
                        .HasColumnType("int");

                    b.Property<string>("SeasonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompetitionId");

                    b.ToTable("LeagueStats");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.MatchAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AlertTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmailAlert")
                        .HasColumnType("bit");

                    b.Property<string>("MatchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("NotificationAlert")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("UserId");

                    b.ToTable("MatchAlerts");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.MatchStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MatchStates");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.MembershipEntities.PlanFeatures", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccumulatorGenerators")
                        .HasColumnType("int");

                    b.Property<int>("CleverLabelling")
                        .HasColumnType("int");

                    b.Property<int>("HistoryOfAccumulators")
                        .HasColumnType("int");

                    b.Property<int>("LeagueStatistics")
                        .HasColumnType("int");

                    b.Property<int>("LiveInsightPerGame")
                        .HasColumnType("int");

                    b.Property<int>("LivePredictionPerGAme")
                        .HasColumnType("int");

                    b.Property<int>("MaxPredictions")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ShockDetectors")
                        .HasColumnType("int");

                    b.Property<int>("WiseProHedge")
                        .HasColumnType("int");

                    b.Property<bool>("WiseProIncluded")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("PlanFeatures");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.MembershipEntities.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IntervalInDays")
                        .HasColumnType("int");

                    b.Property<int>("PriceInCents")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StripeId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.MembershipEntities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.MembershipEntities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SubscriptionEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubscriptionStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.MembershipEntities.UserQuota", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccumulatorGenerators")
                        .HasColumnType("int");

                    b.Property<int>("CleverLabels")
                        .HasColumnType("int");

                    b.Property<int>("HistoryOfAccumulators")
                        .HasColumnType("int");

                    b.Property<int>("LeagueStatistics")
                        .HasColumnType("int");

                    b.Property<int>("ShockDetectors")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrediction")
                        .HasColumnType("int");

                    b.Property<int>("WiseProHedge")
                        .HasColumnType("int");

                    b.Property<bool>("WiseProIncluded")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("UserQuotas");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.Opportunities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AwayTeamFirstHalfWin")
                        .HasColumnType("int");

                    b.Property<int>("AwayTeamSecondHalfWin")
                        .HasColumnType("int");

                    b.Property<int>("AwayTeamWin")
                        .HasColumnType("int");

                    b.Property<int>("BTTS")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamSecondHalfWin")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamWin")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamWinFirstHalfWin")
                        .HasColumnType("int");

                    b.Property<string>("MatchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OverEightPointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("OverEightPointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("OverFivePointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("OverFivePointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("OverFourPointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("OverFourPointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("OverNinePointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("OverNinePointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("OverOnePointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("OverOnePointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("OverSevenPointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("OverSevenPointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("OverSixPointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("OverSixPointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("OverThreePointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("OverThreePointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("OverTwoPointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("OverTwoPointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("OverZeroPointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("OverZeroPointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("UnderEightPointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("UnderEightPointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("UnderFivePointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("UnderFivePointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("UnderFourPointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("UnderFourPointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("UnderNinePointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("UnderNinePointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("UnderOnePointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("UnderOnePointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("UnderSevenPointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("UnderSevenPointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("UnderSixPointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("UnderSixPointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("UnderThreePointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("UnderThreePointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("UnderTwoPointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("UnderTwoPointFiveGoals")
                        .HasColumnType("int");

                    b.Property<int>("UnderZeroPointFiveCorners")
                        .HasColumnType("int");

                    b.Property<int>("UnderZeroPointFiveGoals")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId")
                        .IsUnique()
                        .HasFilter("[MatchId] IS NOT NULL");

                    b.ToTable("Opportunities");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.Opportunity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MatchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Odds")
                        .HasColumnType("real");

                    b.Property<float>("Prediction")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Opportunity");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.PredictionEntities.AllPredictionDataset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("AwayAttacks")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AwayCorners")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AwayDangerousAttacks")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AwayGoals")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AwayPenalties")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AwayPossession")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AwayRed")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AwayShotsOffTarget")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AwayShotsOnTarget")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AwayYellow")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomeAttacks")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomeCorners")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomeDangerousAttacks")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomeGoals")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomePenalties")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomePossession")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomeRed")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomeShotsOffTarget")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomeShotsOnTarget")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomeYellow")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MatchMinutes")
                        .HasColumnType("tinyint");

                    b.Property<short>("MatchTimeSeconds")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("AllPredictionDataset");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.PredictionEntities.DailyPredictionDataset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("AwayAttacks")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AwayCorners")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AwayDangerousAttacks")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AwayGoals")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AwayPenalties")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AwayPossession")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AwayRed")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AwayShotsOffTarget")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AwayShotsOnTarget")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AwayYellow")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomeAttacks")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomeCorners")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomeDangerousAttacks")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomeGoals")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomePenalties")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomePossession")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomeRed")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomeShotsOffTarget")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomeShotsOnTarget")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HomeYellow")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MatchMinutes")
                        .HasColumnType("tinyint");

                    b.Property<short>("MatchTimeSeconds")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("DailyPredictionDataset");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.ResetPasswordModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResetPassword");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.Shocks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("TeamId");

                    b.ToTable("Shocks");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.SportsEntities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.SportsEntities.Competition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentRound")
                        .HasColumnType("int");

                    b.Property<string>("CurrentSeasonId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentStageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeagueLevel")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalRounds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.SportsEntities.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.SportsEntities.Season", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompetitionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EndTime")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasPlayerStats")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTeamStats")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.SportsEntities.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompetitionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FoundationTime")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsNational")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.SportsEntities.UpcomingMatch", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AwayTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AwayTeamLastGame")
                        .HasColumnType("datetime2");

                    b.Property<int>("AwayTeamRank")
                        .HasColumnType("int");

                    b.Property<string>("CompetitionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GroupNum")
                        .HasColumnType("int");

                    b.Property<string>("HomeTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("HomeTeamLastGame")
                        .HasColumnType("datetime2");

                    b.Property<int>("HomeTeamRank")
                        .HasColumnType("int");

                    b.Property<int>("RoundNum")
                        .HasColumnType("int");

                    b.Property<string>("SeasonId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("HomeTeamId");

                    b.ToTable("UpcomingMatches");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.UserProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ThemeDark")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("InPlayWise.Data.SportsEntities.LiveMatchModel", b =>
                {
                    b.Property<string>("MatchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AbruptEnd")
                        .HasColumnType("bit");

                    b.Property<short>("AwayAttacks")
                        .HasColumnType("smallint");

                    b.Property<string>("AwayCornerMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("AwayCorners")
                        .HasColumnType("smallint");

                    b.Property<short>("AwayDangerousAttacks")
                        .HasColumnType("smallint");

                    b.Property<string>("AwayGoalMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("AwayGoals")
                        .HasColumnType("smallint");

                    b.Property<short>("AwayOwnGoals")
                        .HasColumnType("smallint");

                    b.Property<short>("AwayPenalties")
                        .HasColumnType("smallint");

                    b.Property<short>("AwayPossession")
                        .HasColumnType("smallint");

                    b.Property<short>("AwayRed")
                        .HasColumnType("smallint");

                    b.Property<string>("AwayRedMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwayShotsMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("AwayShotsOffTarget")
                        .HasColumnType("smallint");

                    b.Property<short>("AwayShotsOnTarget")
                        .HasColumnType("smallint");

                    b.Property<string>("AwayShotsOnTargetMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwaySubstitutionMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AwayTeamHalfTimeScore")
                        .HasColumnType("int");

                    b.Property<string>("AwayTeamId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwayTeamLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwayTeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AwayTeamOverTimeScore")
                        .HasColumnType("int");

                    b.Property<int>("AwayTeamPenaltyShootoutScore")
                        .HasColumnType("int");

                    b.Property<int>("AwayTeamRank")
                        .HasColumnType("int");

                    b.Property<string>("AwayTeamShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("AwayYellow")
                        .HasColumnType("smallint");

                    b.Property<string>("AwayYellowMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompetitionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompetitionLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompetitionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompetitionShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CurrentKickoffTime")
                        .HasColumnType("bigint");

                    b.Property<bool>("Ended")
                        .HasColumnType("bit");

                    b.Property<int>("GroupNumber")
                        .HasColumnType("int");

                    b.Property<short>("HomeAttacks")
                        .HasColumnType("smallint");

                    b.Property<string>("HomeCornerMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("HomeCorners")
                        .HasColumnType("smallint");

                    b.Property<short>("HomeDangerousAttacks")
                        .HasColumnType("smallint");

                    b.Property<string>("HomeGoalMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("HomeGoals")
                        .HasColumnType("smallint");

                    b.Property<short>("HomeOwnGoals")
                        .HasColumnType("smallint");

                    b.Property<short>("HomePenalties")
                        .HasColumnType("smallint");

                    b.Property<short>("HomePossession")
                        .HasColumnType("smallint");

                    b.Property<short>("HomeRed")
                        .HasColumnType("smallint");

                    b.Property<string>("HomeRedMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeShotsMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("HomeShotsOffTarget")
                        .HasColumnType("smallint");

                    b.Property<short>("HomeShotsOnTarget")
                        .HasColumnType("smallint");

                    b.Property<string>("HomeShotsOnTargetMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeSubstitutionMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeTeamHalfTimeScore")
                        .HasColumnType("int");

                    b.Property<string>("HomeTeamId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTeamLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeTeamOverTimeScore")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamPenaltyShootOutScore")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamRank")
                        .HasColumnType("int");

                    b.Property<string>("HomeTeamShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("HomeYellow")
                        .HasColumnType("smallint");

                    b.Property<string>("HomeYellowMinutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("MatchEndStatus")
                        .HasColumnType("smallint");

                    b.Property<short>("MatchMinutes")
                        .HasColumnType("smallint");

                    b.Property<long>("MatchStartTime")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("MatchStartTimeFormatted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MatchStartTimeOfficial")
                        .HasColumnType("datetime2");

                    b.Property<short>("MatchStatus")
                        .HasColumnType("smallint");

                    b.Property<long>("MatchTimeSeconds")
                        .HasColumnType("bigint");

                    b.Property<byte>("NumOfOpportunities")
                        .HasColumnType("tinyint");

                    b.Property<bool>("OverTime")
                        .HasColumnType("bit");

                    b.Property<bool>("PenaltyShootOut")
                        .HasColumnType("bit");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<string>("SeasonId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("matchEndMinutes")
                        .HasColumnType("int");

                    b.Property<int>("stoppageTime")
                        .HasColumnType("int");

                    b.HasKey("MatchId");

                    b.ToTable("LiveMatches");
                });

            modelBuilder.Entity("InPlayWiseData.Entities.EventModel", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventGround")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.FavouriteCompetitions", b =>
                {
                    b.HasOne("InPlayWise.Data.Entities.SportsEntities.Competition", "Competition")
                        .WithMany("favComps")
                        .HasForeignKey("CompetitionId");

                    b.HasOne("InPlayWise.Data.Entities.ApplicationUser", "User")
                        .WithMany("FavouriteCompetition")
                        .HasForeignKey("UserId");

                    b.Navigation("Competition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.FavouriteTeams", b =>
                {
                    b.HasOne("InPlayWise.Data.Entities.SportsEntities.Team", "Teams")
                        .WithMany("FavTeams")
                        .HasForeignKey("TeamId");

                    b.HasOne("InPlayWise.Data.Entities.ApplicationUser", "User")
                        .WithMany("FavouriteTeams")
                        .HasForeignKey("UserId");

                    b.Navigation("Teams");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.FeaturesCountEntities.CleverLabelsCounter", b =>
                {
                    b.HasOne("InPlayWise.Data.Entities.SportsEntities.Team", "Team")
                        .WithMany("CleverLabelsCounter")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InPlayWise.Data.Entities.ApplicationUser", "User")
                        .WithMany("CleverLabelsCounter")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.FeaturesCountEntities.FeatureCounter", b =>
                {
                    b.HasOne("InPlayWise.Data.Entities.UserProfile", "UserProfile")
                        .WithOne("Features")
                        .HasForeignKey("InPlayWise.Data.Entities.FeaturesCountEntities.FeatureCounter", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.FeaturesCountEntities.LeagueStatsCount", b =>
                {
                    b.HasOne("InPlayWise.Data.Entities.ApplicationUser", "User")
                        .WithMany("LeagueStatsCounter")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InPlayWise.Data.Entities.SportsEntities.Competition", "Competition")
                        .WithMany("LeagueStatsCounter")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Competition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.FeaturesCountEntities.LiveInsightsPerGame", b =>
                {
                    b.HasOne("InPlayWise.Data.Entities.FeaturesCountEntities.FeatureCounter", null)
                        .WithMany("LiveInsightsPerGame")
                        .HasForeignKey("FeatureCounterUserId");

                    b.HasOne("InPlayWise.Data.SportsEntities.LiveMatchModel", "Match")
                        .WithMany("LiveInsightsCounter")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InPlayWise.Data.Entities.ApplicationUser", "User")
                        .WithMany("LiveInsightsPerGamesCounter")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Match");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.FeaturesCountEntities.PredictionCounter", b =>
                {
                    b.HasOne("InPlayWise.Data.SportsEntities.LiveMatchModel", "Match")
                        .WithMany("PredictionCounter")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InPlayWise.Data.Entities.ApplicationUser", "User")
                        .WithMany("PredictionCounter")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Match");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.FeaturesCountEntities.ShockCounter", b =>
                {
                    b.HasOne("InPlayWise.Data.SportsEntities.LiveMatchModel", "Match")
                        .WithMany("ShockCounter")
                        .HasForeignKey("Matchid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InPlayWise.Data.Entities.ApplicationUser", "User")
                        .WithOne("ShockCounter")
                        .HasForeignKey("InPlayWise.Data.Entities.FeaturesCountEntities.ShockCounter", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Match");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.LeagueStats", b =>
                {
                    b.HasOne("InPlayWise.Data.Entities.SportsEntities.Competition", "Competition")
                        .WithOne("LeagueStats")
                        .HasForeignKey("InPlayWise.Data.Entities.LeagueStats", "CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.MatchAlert", b =>
                {
                    b.HasOne("InPlayWise.Data.Entities.SportsEntities.UpcomingMatch", "UpcomingMatch")
                        .WithMany("MatchAlerts")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InPlayWise.Data.Entities.ApplicationUser", "User")
                        .WithMany("MatchAlerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("UpcomingMatch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.MembershipEntities.PlanFeatures", b =>
                {
                    b.HasOne("InPlayWise.Data.Entities.MembershipEntities.Product", "Product")
                        .WithOne("Features")
                        .HasForeignKey("InPlayWise.Data.Entities.MembershipEntities.PlanFeatures", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.MembershipEntities.Price", b =>
                {
                    b.HasOne("InPlayWise.Data.Entities.MembershipEntities.Product", "Product")
                        .WithMany("Price")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.MembershipEntities.Subscription", b =>
                {
                    b.HasOne("InPlayWise.Data.Entities.MembershipEntities.Product", "Product")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InPlayWise.Data.Entities.ApplicationUser", "User")
                        .WithOne("Subscription")
                        .HasForeignKey("InPlayWise.Data.Entities.MembershipEntities.Subscription", "UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.MembershipEntities.UserQuota", b =>
                {
                    b.HasOne("InPlayWise.Data.Entities.ApplicationUser", "User")
                        .WithOne("UserQuota")
                        .HasForeignKey("InPlayWise.Data.Entities.MembershipEntities.UserQuota", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.Opportunities", b =>
                {
                    b.HasOne("InPlayWise.Data.SportsEntities.LiveMatchModel", "Match")
                        .WithOne("OpportunitiesAll")
                        .HasForeignKey("InPlayWise.Data.Entities.Opportunities", "MatchId");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.Opportunity", b =>
                {
                    b.HasOne("InPlayWise.Data.SportsEntities.LiveMatchModel", "Match")
                        .WithMany("Opportunities")
                        .HasForeignKey("MatchId");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.Shocks", b =>
                {
                    b.HasOne("InPlayWise.Data.SportsEntities.LiveMatchModel", "Match")
                        .WithMany("Shocks")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InPlayWise.Data.Entities.SportsEntities.Team", "Team")
                        .WithMany("Shocks")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Match");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.SportsEntities.UpcomingMatch", b =>
                {
                    b.HasOne("InPlayWise.Data.Entities.SportsEntities.Team", "AwayTeam")
                        .WithMany("UpcomingAwayMatches")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InPlayWise.Data.Entities.SportsEntities.Competition", "Competition")
                        .WithMany("UpcomingMatches")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InPlayWise.Data.Entities.SportsEntities.Team", "HomeTeam")
                        .WithMany("UpcomingHomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AwayTeam");

                    b.Navigation("Competition");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.UserProfile", b =>
                {
                    b.HasOne("InPlayWise.Data.Entities.ApplicationUser", "User")
                        .WithOne("Profile")
                        .HasForeignKey("InPlayWise.Data.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InPlayWise.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InPlayWise.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InPlayWise.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InPlayWise.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("CleverLabelsCounter");

                    b.Navigation("FavouriteCompetition");

                    b.Navigation("FavouriteTeams");

                    b.Navigation("LeagueStatsCounter");

                    b.Navigation("LiveInsightsPerGamesCounter");

                    b.Navigation("MatchAlerts");

                    b.Navigation("PredictionCounter");

                    b.Navigation("Profile");

                    b.Navigation("ShockCounter");

                    b.Navigation("Subscription");

                    b.Navigation("UserQuota");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.FeaturesCountEntities.FeatureCounter", b =>
                {
                    b.Navigation("LiveInsightsPerGame");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.MembershipEntities.Product", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Price");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.SportsEntities.Competition", b =>
                {
                    b.Navigation("LeagueStats");

                    b.Navigation("LeagueStatsCounter");

                    b.Navigation("UpcomingMatches");

                    b.Navigation("favComps");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.SportsEntities.Team", b =>
                {
                    b.Navigation("CleverLabelsCounter");

                    b.Navigation("FavTeams");

                    b.Navigation("Shocks");

                    b.Navigation("UpcomingAwayMatches");

                    b.Navigation("UpcomingHomeMatches");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.SportsEntities.UpcomingMatch", b =>
                {
                    b.Navigation("MatchAlerts");
                });

            modelBuilder.Entity("InPlayWise.Data.Entities.UserProfile", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("InPlayWise.Data.SportsEntities.LiveMatchModel", b =>
                {
                    b.Navigation("LiveInsightsCounter");

                    b.Navigation("Opportunities");

                    b.Navigation("OpportunitiesAll");

                    b.Navigation("PredictionCounter");

                    b.Navigation("ShockCounter");

                    b.Navigation("Shocks");
                });
#pragma warning restore 612, 618
        }
    }
}
